#!/bin/bash
# Author: PietroVN
# Deps: mpv, youtube-dl(or any fork), search (included), curl, sed
# Examples:
# video anime list							| List anime and give some useful options
# video anime search <anime name>			| Search for anime with this name
# video youtube <video name>				| Search for a video with this name
# video url <url>							| Play specified url

# Include search
. /usr/local/bin/search

# Command
command=$@

# Enviroment
root="${HOME}/video_cli"

# Anime related
anime_root="${root}/animes/"
tmp_anime_list="${XDG_RUNTIME_DIR}/tmp_local_anime_list.txt"

_youtube() {
	# Leave only the title on command
	command=$(sed 's/youtube//g' <<< ${command})

	# Search
	search _youtube:${command}

	# Check for errors | don't warn the user about the error because search already handle this
	[[ -f "${tmp_videos_list}" ]] || exit

	# Video selection
	echo "Select video:"
	read video_number

	# Get video from tmp videos
	video=$(cat ${tmp_videos_list} | sed -n ${video_number}p)

	# Play
	mpv --no-terminal ${youtube}${video}
}

_set_anime_variables() {
	anime_current=$(cat ${tmp_selected_anime_path})

	# Set folders
	anime_folder="${anime_root}${anime_current}/"
	anime_current_episode_path="${anime_folder}/current_episode.txt"
	anime_current_watching_path="${anime_folder}/current_watching.txt"
	anime_episodes_list="${anime_folder}/episodes_list.txt"
	anime_episodes_dir="${anime_folder}/episodes/"

	# Set some variables that depend on files
	[[ -f ${anime_current_episode_path} ]] && anime_current_episode=$(cat ${anime_current_episode_path})
	[[ -f ${anime_episodes_list} ]] && anime_episodes=$(cat ${anime_episodes_list})
	anime_current_watching=${anime_current}
}

_anime_list() {
	number=1

	# Delete previous anime list
	[[ -d ${tmp_anime_list} ]] && rm ${tmp_anime_list}

	# Store | List
	for f in ${anime_root}*; do
		echo "$(basename ${f})" > ${tmp_anime_list}
		echo "${number} - $(basename ${f})"
		number=$((${number}+1))
	done

	# Read user choice
	echo ""
	echo "Choose an anime:"
	read choosen_anime

	# Enter anime screen
	echo "Anime: $(cat ${tmp_anime_list} | sed -n ${choosen_anime}p)"
	echo "[1] - Watch current episode"
	echo "[2] - Watch next episode"
	echo "[3] - Watch previous episode"
	echo "[4] - Download all episodes"
	echo "[5] - Download selected episodes (soon)"
	echo "[q] - Quit"
	echo ""
	echo "Choosen an option:"

	# Read user choice
	read what_to_do

	case ${what_to_do} in 
		"1")
			# Current anime
			echo "$(cat ${tmp_anime_list} | sed -n ${choosen_anime}p)" > ${tmp_selected_anime_path}

			# Watch mode
			watch="current"

			# Watch
			_anime_watch
		;;
		"2")
			# Current anime
			echo "$(cat ${tmp_anime_list} | sed -n ${choosen_anime}p)" > ${tmp_selected_anime_path}

			# Watch mode
			watch="next"

			# Watch
			_anime_watch
		;;
		"3")
			# Current anime
			echo "$(cat ${tmp_anime_list} | sed -n ${choosen_anime}p)" > ${tmp_selected_anime_path}

			# Watch mode
			watch="prev"

			# Watch
			_anime_watch
		;;
		"4")
			# Current anime
			echo "$(cat ${tmp_anime_list} | sed -n ${choosen_anime}p)" > ${tmp_selected_anime_path}

			# Download
			_anime_download
		;;
		"q")
			exit 0
		;;
	esac
}

_anime_watch() {
	case ${watch} in
		"current")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set the variables
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d ${anime_episodes_dir} ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)

			# informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv.."

			# play && falback
			mpv --no-terminal ${anime} &

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
		"next")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set current ep
			_set_anime_variables
			anime_episode="$((${anime_current_episode}+1))"
			echo "${anime_episode}" > ${anime_current_episode_path}
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d ${anime_episodes_dir} ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)

			# informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv.."

			# play && falback
			mpv --no-terminal ${anime} &

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
		"prev")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set current ep
			_set_anime_variables
			anime_episode="$((${anime_current_episode}-1))"
			echo "${anime_episode}" > ${anime_current_episode_path}
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d ${anime_episodes_dir} ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)

			# Informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv.."

			# Play
			mpv --no-terminal ${anime} &

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
	esac
}

_anime_watching() {
	while true; do
		echo "[next | prev]"
		read what_to_do

		case ${what_to_do} in
			"next")
				# Watch mode
				watch="next"

				# Watch
				_anime_watch
			;;
			"prev")
				# Watch mode
				watch="prev"

				# Watch
				_anime_watch
			;;
		esac
	done
}

_anime_download() {
	number=1
	# Get anime
	_set_anime_variables

	# Create episodes dir
	[[ -d "${anime_episodes_dir}" ]] || mkdir ${anime_episodes_dir}

	# CD to episodes dir
	cd ${anime_episodes_dir}

	# Download
	for f in $(cat ${anime_episodes_list}); do
		youtube-dl ${f} -o "ep-${number}.%(ext)s"
		number=$((${number}+1))
	done
}

_anime_search() {
	# Kill previous mpv instance
	[[ $(pgrep mpv) ]] && killall mpv

	# Leave only the title on command
	command=$(sed 's/anime//g' <<< ${command})
	command=$(sed 's/search//g' <<< ${command})

	########## Animes folder

	# Set some variables that depend on files
	_set_anime_variables

	# Setup a dir on user home
	[[ -d "${root}" ]] || mkdir ${root}

	# Create anime root
	[[ -d "${anime_root}" ]] || mkdir ${anime_root}

	# Create folder for saving current anime episode
	[[ -d "${anime_folder}" ]] || mkdir "${anime_folder}"

	# Search anime
	search _anime:${command}
	
	# Check for errors
	[[ -f "${tmp_animes_list}" ]] || echo "Error fetching anime list"
	[[ -f "${tmp_animes_list}" ]] || exit

	# Set some variables that depend on files
	_set_anime_variables
	
	########## QOL

	# Check if user watched this anime before and prompt to continue watching
	if [[ -f ${anime_current_episode_path} ]]; then
		# Prompt user
		echo ""
		echo "You already watched this anime before, do you want to continue from where you stopped?"
		echo "[yes | no | next | prev]"
		read continue_

		# Continue
		[[ "${continue_}" == "yes" ]] && choosen_episode=${anime_current_episode}
		[[ "${continue_}" == "next" ]] && choosen_episode=$((${anime_current_episode}+1))
		[[ "${continue_}" == "prev" ]] && choosen_episode=$((${anime_current_episode}-1))
		[[ "${continue_}" == "no" ]] || echo "${choosen_episode}" > ${anime_current_episode_path}

		# Set some variables that depend on files
		_set_anime_variables
	fi
	
	if [[ "${continue_}" == "no" || -z ${continue_} ]]; then
		# Fetch episodes list
		search _choose_anime_episode
		
		# Check for errors
		[[ -f "${tmp_animes_list}" ]] || echo "Error fetching episodes list"
		[[ -f "${tmp_animes_list}" ]] || exit

		# Delete previous episode list
		[[ -f ${anime_episodes_list} ]] && rm ${anime_episodes_list}
	
		# Set some variables that depend on files
		_set_anime_variables

		# Dump episodes to animedir
		for f in $(cat ${tmp_animes_list}); do
			echo "${f}" >> "${anime_episodes_list}"
		done

		# Select episode
		echo "Select episode:"
		read choosen_episode
	fi

	# Get episode
	anime=$(cat ${anime_episodes_list} | sed -n ${choosen_episode}p)

	# Save current episode
	echo "${choosen_episode}" > "${anime_current_episode_path}"

	# Set some variables that depend on files
	_set_anime_variables

	# Informs the user
	echo "Playing: ${anime_current}"
	echo "Episode: ${anime_current_episode}"

	# Update current_watching
	echo "${anime_current}" > ${anime_current_watching_path}

	echo ""
	echo "Opening mpv..."

	# Play
	mpv --no-terminal ${anime} &

	# Drop user in a cli for changing episodes
	_anime_watching
}

_url() {
	# Clear command
	command=$(sed 's/url//g' <<< ${command})

	# Play
	mpv --no-terminal ${command}
}

# Check if command is empty
[[ -z ${command} ]] && echo "Empty command"

case ${command} in
	"anime list")
		_anime_list
	;;
	*"anime search"*)
		_anime_search
	;;
	*"youtube"*)
		_youtube
	;;
	*"url"*)
		_url
	;;
	"next")
		_next
	;;
	"prev")
		_prev
	;;
	"previous")
		_prev
	;;
esac
