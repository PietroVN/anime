#!/bin/bash
# Author: PietroVN
# Deps: mpv, youtube-dl(or any fork), search (included), curl, sed
# Examples:
# anime list						| List anime and give some useful options
# anime search <anime name>			| Search for anime with this name

# Include search
. /usr/local/bin/search

# Command
command=$@

# Anime related
anime_root="${HOME}/animes/"
anime_root_misc_dir="${anime_root}/misc/"
anime_favorite_list="${anime_root_misc_dir}/favorite_list.txt"
tmp_local_anime_list="${XDG_RUNTIME_DIR}/tmp_local_anime_list.txt"

_set_anime_variables() {
	anime_current=$(cat ${tmp_selected_anime_path})

	# Set folders
	anime_folder="${anime_root}${anime_current}/"
	anime_current_episode_path="${anime_folder}/current_episode.txt"
	anime_current_watching_path="${anime_folder}/current_watching.txt"
	anime_provider_path="${anime_folder}/provider.txt"
	anime_url_path="${anime_folder}/uzrl.txt"
	anime_id_path="${anime_folder}/id.txt"
	anime_episodes_list="${anime_folder}/episodes_list.txt"
	anime_episodes_dir="${anime_folder}/episodes/"

	# Set some variables that depend on files
	[[ -f ${anime_current_episode_path} ]] && anime_current_episode=$(cat ${anime_current_episode_path})
	[[ -f ${anime_episodes_list} ]] && anime_episodes=$(cat ${anime_episodes_list})
	anime_current_watching=${anime_current}
}

_anime_list() {
	number=1

	# Delete previous anime list
	[[ -f ${tmp_local_anime_list} ]] && rm ${tmp_local_anime_list}

	# Title
	echo "Animes:"

	# Store | List
	for f in ${anime_root}*; do
			[[ "$(basename $f)" != *"misc"* ]] && echo "$(basename ${f})" >> ${tmp_local_anime_list}
			[[ "$(basename $f)" != *"misc"* ]] && echo "${number} - $(basename ${f})"
			[[ "$(basename $f)" != *"misc"* ]] && number=$((number + 1))
	done

	# Read user choice
	echo ""
	echo "Choose an anime:"
	read choosen_anime

	# Current anime
	echo "$(cat ${tmp_local_anime_list} | sed -n ${choosen_anime}p)" > ${tmp_selected_anime_path}

	# Set anime variables
	_set_anime_variables

	# Check if anime is already on favorite list
	if [[ -f ${anime_favorite_list} ]]; then
		for f in $(cat ${anime_favorite_list}); do
			[[ ${f} == $(cat ${tmp_local_anime_list} | sed -n ${choosen_anime}p) ]] && favorite=true
		done
	fi

	# Check if we have downloaded episode list
	[[ -f "${anime_episodes_list}" ]] || need_to_fetch=true

	# Set anime variables
	_set_anime_variables

	# Enter anime screen
	echo "Anime: ${anime_current}"
	echo "Status:"
	[[ -z ${need_to_fetch} ]] && echo "- Episodes: $(cat ${anime_episodes_list} | wc -l)"
	[[ -d "${anime_episodes_dir}" ]] && echo "- Downloaded episodes: $(ls ${anime_episodes_dir} | wc -l)"
	echo "- Current episode: ${anime_current_episode}"
	echo "Options:"
	echo "[1] - Watch current episode"
	echo "[2] - Watch next episode"
	echo "[3] - Watch previous episode"
	echo "[4] - Download all episodes"
	echo "[5] - Download selected episodes (soon)"
	[[ -z ${favorite} ]] && echo "[6] - Add to favorites"
	[[ -z ${favorite} ]] || echo "[6] - Remove from favorites"
	[[ -z ${need_to_fetch} ]] && echo "[7] - Fetch episode list"
	[[ -z ${need_to_fetch} ]] || echo "[7] - Fetch episode list (RECOMMENDED!)"
	echo "[8] - Remove from anime list"
	echo "[q] - Quit"
	echo ""
	echo "Choosen an option:"

	# Read user choice
	read what_to_do

	case ${what_to_do} in 
		"1")
			# Watch mode
			watch="current"

			# Watch
			_anime_watch
		;;
		"2")
			# Watch mode
			watch="next"

			# Watch
			_anime_watch
		;;
		"3")
			# Watch mode
			watch="prev"

			# Watch
			_anime_watch
		;;
		"4")
			# Download
			_anime_download
		;;
		"6")
			_anime_favorite
		;;
		"7")
			_anime_fetch_episode_list
		;;
		"8")
			_anime_remove
		;;

		"q")
			exit 0
		;;
	esac
}
_anime_remove() {
	# Delete anime folder
	rm -rf ${anime_folder}

	# Remove from favorite list
	_anime_favorite
}

_anime_fetch_episode_list() {

	# Prepare before use search to index episodes
	echo "$(cat ${anime_url_path})" > "${tmp_animes_list}"
	echo "$(cat ${anime_id_path})" >> ${tmp_animes_list}
	echo "$(cat ${anime_provider_path})" >> "${tmp_animes_list}"

	# First we use search to index
	search _choose_anime_episode &> /dev/null

	# Detect if user already have a episode list and delete
	[[ -f "${anime_episodes_list}" ]] && rm "${anime_episodes_list}"

	#  Then we dump the indexed links
	for f in $(cat ${tmp_animes_list}); do
		echo "${f}" >> "${anime_episodes_list}"
	done
}

_anime_favorite() {
	# Add favorite
	[[ -z ${favorite} ]] && echo "$(cat ${tmp_local_anime_list} | sed -n ${choosen_anime}p)" >> "${anime_favorite_list}"

	# Remove favorite
	[[ -z ${favorite} ]] || r=$(sed "s/$(cat ${tmp_local_anime_list} | sed -n ${choosen_anime}p)//g" ${anime_favorite_list})
	[[ -z ${favorite} ]] || echo "${r}" > "${anime_favorite_list}"
}

_anime_watch() {
	case ${watch} in
		"current")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set the variables
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d ${anime_episodes_dir} ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)

			# informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv..."

			# play && falback
			mpv --no-terminal --save-position-on-quit ${anime} &

			# unset anime
			unset anime

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
		"next")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set current ep
			_set_anime_variables
			anime_episode=$((anime_current_episode + 1))
			echo "${anime_episode}" > "${anime_current_episode_path}"
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d "${anime_episodes_dir}" ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)
	
			# informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv..."

			# play && falback
			mpv --no-terminal  --save-position-on-quit ${anime} &

			# unset anime
			unset anime

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
		"prev")
			# Kill previous mpv instance
			[[ $(pgrep mpv) ]] && killall mpv

			# Set current ep
			_set_anime_variables
			anime_episode=$((anime_current_episode - 1))
			echo "${anime_episode}" > "${anime_current_episode_path}"
			_set_anime_variables

			# Prefer playing the downloaded episode
			if [[ -d ${anime_episodes_dir} ]]; then
				for f in ${anime_episodes_dir}*; do
						[[ ${f} == *${anime_current_episode}* ]] && anime=${f} 
				done
			fi

			# Play online version if user haven't downloaded this episode
			[[ -z ${anime} ]] && anime=$(cat ${anime_episodes_list} | sed -n ${anime_current_episode}p)

			# Informs the user
			echo "Playing: ${anime_current_watching}"
			echo "Episode: ${anime_current_episode}"

			echo ""
			echo "Opening mpv..."

			# Play
			mpv --no-terminal --save-position-on-quit ${anime} &

			# unset anime
			unset anime

			# Drop user in a cli for changing episodes
			_anime_watching
		;;
	esac
}

_anime_watching() {
	while true; do
		clear
		echo "[next | prev | quit]"
		read what_to_do

		case ${what_to_do} in
			"next")
				# Watch mode
				watch="next"

				# Watch
				_anime_watch
			;;
			"prev")
				# Watch mode
				watch="prev"

				# Watch
				_anime_watch
			;;
			"quit")
				# Kill mpv
				killall mpv

				# Exit
				exit 0 
			;;
		esac
	done
}

_anime_download() {
	# Title
	echo "Downloading anime: ${anime_current}"

	number=1
	# Get anime
	_set_anime_variables

	# Create episodes dir
	[[ -d "${anime_episodes_dir}" ]] || mkdir ${anime_episodes_dir}

	# CD to episodes dir
	cd ${anime_episodes_dir}

	# Download
	for f in $(cat ${anime_episodes_list}); do
		echo "Downloading episode: ${number}"
		[[ $(ls ${anime_episodes_dir}) == *"${f}"* ]] || youtube-dl --retries=infinite --fragment-retries=infinite --no-playlist ${f} -o "ep-${number}.%(ext)s" &> /dev/null
		number=$((${number}+1))
	done
}

_anime_search() {
	# Leave only the title on command
	command=$(sed 's/anime//g' <<< ${command})
	command=$(sed 's/search//g' <<< ${command})

	# Search anime
	search _anime:${command}

	# Set variables
	_set_anime_variables

	# Create anime root
	[[ -d "${anime_root}" ]] || mkdir ${anime_root}

	# Create misc folder
	[[ -d "${anime_root_misc_dir}" ]] || mkdir ${anime_root_misc_dir}

	# Set variables
	_set_anime_variables

	# Check if this anime is already on the list
	if [[ ! -d "${anime_folder}" ]]; then
		# Prompt user to add the selected anime to the list
		echo "Do you want to add this anime to your list?"
		echo "[yes | no]"
		read  add_anime

		case ${add_anime} in
			"yes")
				# Informs the user
				echo "Adding ${anime_current} to your list"

				# Create folder for saving current anime episode
				mkdir "${anime_folder}"

				# Set variables
				_set_anime_variables

				# Set anime provider
				echo "$(tail -n1 ${tmp_animes_list})" > ${anime_provider_path}

				# Set anime id
				echo "$(tail -n2 ${tmp_animes_list} | sed -n 1p)" > ${anime_id_path}

				# Set anime url
				echo "$(cat ${tmp_animes_list} | sed -n ${choosen_anime}p)" > ${anime_url_path}

				# Set first episode
				echo "1" > "${anime_current_episode_path}"
			;;
			"no")
				exit 0
			;;
		esac
	else
		echo "You already have this anime added to your list"
	fi

	# Check for errors
	[[ -f "${tmp_animes_list}" ]] || echo "Error fetching anime list"
	[[ -f "${tmp_animes_list}" ]] || exit

	# Set some variables that depend on files
	_set_anime_variables		
}

# Check if command is empty
[[ -z ${command} ]] && echo "Empty command"

case ${command} in
	"list")
		_anime_list
	;;
	*"search"*)
		_anime_search
	;;
esac
